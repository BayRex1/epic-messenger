class PostsManager {
    constructor() {
        this.posts = [];
    }

    async loadPosts() {
        try {
            const response = await fetch('/api/posts', {
                headers: {
                    'Authorization': `Bearer ${app.token}`
                }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    this.posts = data.posts;
                    this.renderPosts();
                }
            }
        } catch (error) {
            console.error('Error loading posts:', error);
        }
    }

    renderPosts() {
        const postsContainer = document.getElementById('postsContainer');
        if (!postsContainer) return;

        if (this.posts.length === 0) {
            postsContainer.innerHTML = `
                <div class="empty-state">
                    <img src="/assets/feed.svg" alt="No posts" class="empty-icon">
                    <h3>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤</h3>
                    <p>–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —á–µ–º-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º!</p>
                </div>
            `;
            return;
        }

        postsContainer.innerHTML = this.posts.map(post => `
            <div class="post" data-post-id="${post.id}">
                <div class="post-header">
                    <div class="user-info">
                        <img src="${post.user.avatar || '/assets/profile.svg'}" alt="Avatar" class="user-avatar">
                        <div class="user-details">
                            <span class="display-name">${post.user.displayName}</span>
                            <span class="username">${post.user.username}</span>
                        </div>
                        ${post.user.isVerified ? '<span class="verified-badge">‚úì</span>' : ''}
                        ${post.user.isDeveloper ? '<span class="developer-badge">‚ö°</span>' : ''}
                    </div>
                    <span class="post-time">${app.formatTime(post.createdAt)}</span>
                </div>
                
                <div class="post-content">
                    ${post.text ? `<p class="post-text">${this.escapeHtml(post.text)}</p>` : ''}
                    ${post.media ? this.renderMedia(post.media) : ''}
                </div>
                
                <div class="post-stats">
                    <span class="views-count">üëÅÔ∏è ${post.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
                </div>
                
                <div class="post-actions">
                    <button class="post-action like-btn ${post.likedBy.includes(app.currentUser.id) ? 'liked' : ''}" 
                            onclick="postsManager.likePost('${post.id}')">
                        <img src="/assets/like.svg" alt="Like" class="action-icon">
                        <span class="action-count">${post.likes}</span>
                    </button>
                    
                    <button class="post-action comment-btn" onclick="postsManager.toggleComments('${post.id}')">
                        <img src="/assets/message.svg" alt="Comments" class="action-icon">
                        <span>–ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
                    </button>
                    
                    <button class="post-action share-btn" onclick="postsManager.sharePost('${post.id}')">
                        <img src="/assets/gift.svg" alt="Share" class="action-icon">
                        <span>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</span>
                    </button>
                </div>
                
                <div class="post-comments" id="comments-${post.id}" style="display: none;">
                    <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
                </div>
            </div>
        `).join('');
    }

    renderMedia(media) {
        if (!media) return '';

        switch (media.type) {
            case 'image':
                return `
                    <div class="post-media">
                        <img src="${media.url}" alt="Post image" onclick="postsManager.openMedia('${media.url}')">
                    </div>
                `;
            case 'video':
                return `
                    <div class="post-media">
                        <video controls>
                            <source src="${media.url}" type="video/mp4">
                            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                        </video>
                    </div>
                `;
            case 'audio':
                return `
                    <div class="post-media">
                        <audio controls>
                            <source src="${media.url}" type="audio/mpeg">
                            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                        </audio>
                    </div>
                `;
            default:
                return `
                    <div class="post-file">
                        <a href="${media.url}" download class="file-download">
                            üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: ${media.originalName || '—Ñ–∞–π–ª'}
                        </a>
                    </div>
                `;
        }
    }

    async createPost(e) {
        e.preventDefault();
        
        const formData = new FormData();
        const textInput = document.getElementById('postText');
        const mediaInput = document.getElementById('postMedia');
        const mediaPreview = document.getElementById('mediaPreview');

        if (textInput.value.trim()) {
            formData.append('text', textInput.value.trim());
        }

        if (mediaInput.files[0]) {
            formData.append('media', mediaInput.files[0]);
        }

        if (!textInput.value.trim() && !mediaInput.files[0]) {
            app.showNotification('–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞', 'error');
            return;
        }

        try {
            const response = await fetch('/api/posts/create', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${app.token}`
                },
                body: formData
            });

            const data = await response.json();

            if (data.success) {
                textInput.value = '';
                mediaInput.value = '';
                mediaPreview.innerHTML = '';
                mediaPreview.style.display = 'none';
                
                app.showNotification('–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!', 'success');
                await this.loadPosts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã
            } else {
                app.showNotification(data.message, 'error');
            }
        } catch (error) {
            console.error('Error creating post:', error);
            app.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞', 'error');
        }
    }

    async likePost(postId) {
        try {
            const response = await fetch(`/api/posts/${postId}/like`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${app.token}`,
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                // –û–±–Ω–æ–≤–∏—Ç—å UI
                const likeBtn = document.querySelector(`[data-post-id="${postId}"] .like-btn`);
                const likeCount = likeBtn.querySelector('.action-count');
                
                likeBtn.classList.toggle('liked', data.liked);
                likeCount.textContent = data.likes;

                app.showNotification(data.liked ? '–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω!' : '–õ–∞–π–∫ —É–¥–∞–ª–µ–Ω', 'info');
            }
        } catch (error) {
            console.error('Error liking post:', error);
            app.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞', 'error');
        }
    }

    previewMedia(e) {
        const file = e.target.files[0];
        const preview = document.getElementById('mediaPreview');
        
        if (!file) {
            preview.innerHTML = '';
            preview.style.display = 'none';
            return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
            const fileType = file.type.split('/')[0];
            let previewHTML = '';

            switch (fileType) {
                case 'image':
                    previewHTML = `
                        <div class="media-preview-item">
                            <img src="${e.target.result}" alt="Preview">
                            <button type="button" class="remove-media" onclick="postsManager.removeMediaPreview()">√ó</button>
                        </div>
                    `;
                    break;
                case 'video':
                    previewHTML = `
                        <div class="media-preview-item">
                            <video controls>
                                <source src="${e.target.result}" type="${file.type}">
                            </video>
                            <button type="button" class="remove-media" onclick="postsManager.removeMediaPreview()">√ó</button>
                        </div>
                    `;
                    break;
                case 'audio':
                    previewHTML = `
                        <div class="media-preview-item">
                            <audio controls>
                                <source src="${e.target.result}" type="${file.type}">
                            </audio>
                            <button type="button" class="remove-media" onclick="postsManager.removeMediaPreview()">√ó</button>
                        </div>
                    `;
                    break;
                default:
                    previewHTML = `
                        <div class="media-preview-item">
                            <div class="file-preview">
                                <span>üìé ${file.name}</span>
                            </div>
                            <button type="button" class="remove-media" onclick="postsManager.removeMediaPreview()">√ó</button>
                        </div>
                    `;
            }

            preview.innerHTML = previewHTML;
            preview.style.display = 'block';
        };
        reader.readAsDataURL(file);
    }

    removeMediaPreview() {
        const preview = document.getElementById('mediaPreview');
        const mediaInput = document.getElementById('postMedia');
        
        preview.innerHTML = '';
        preview.style.display = 'none';
        mediaInput.value = '';
    }

    openMedia(url) {
        // –û—Ç–∫—Ä—ã—Ç—å –º–µ–¥–∏–∞ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
        window.open(url, '_blank');
    }

    toggleComments(postId) {
        const commentsSection = document.getElementById(`comments-${postId}`);
        if (commentsSection.style.display === 'none') {
            commentsSection.style.display = 'block';
            this.loadComments(postId);
        } else {
            commentsSection.style.display = 'none';
        }
    }

    async loadComments(postId) {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞
        const commentsSection = document.getElementById(`comments-${postId}`);
        commentsSection.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...</div>';

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        setTimeout(() => {
            commentsSection.innerHTML = `
                <div class="comment-form">
                    <textarea placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..." class="comment-input"></textarea>
                    <button class="btn btn-primary" onclick="postsManager.addComment('${postId}')">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
                <div class="comments-list">
                    <div class="empty-comments">–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</div>
                </div>
            `;
        }, 500);
    }

    async addComment(postId) {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        app.showNotification('–§—É–Ω–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
    }

    async sharePost(postId) {
        // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å—Ç–æ–º
        if (navigator.share) {
            try {
                await navigator.share({
                    title: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç',
                    text: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç –∏–∑ Epic Messenger',
                    url: window.location.href
                });
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ sharing:', error);
            }
        } else {
            // Fallback - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
            navigator.clipboard.writeText(window.location.href);
            app.showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        }
    }

    handleNewPost(post) {
        // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        this.posts.unshift(post);
        this.renderPosts();
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

const postsManager = new PostsManager();
