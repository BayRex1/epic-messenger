const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const fs = require('fs');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// Middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static(path.join(__dirname, 'public')));

// –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
let users = [];
let messages = [];
let posts = [];
let gifts = [];
let promoCodes = [];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
function generateId() {
    return Date.now().toString() + Math.random().toString(36).substr(2, 9);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function initializeData() {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (users.length === 0) {
        users = [
            {
                id: '1',
                username: 'admin',
                displayName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                email: 'admin@example.com',
                password: 'admin123',
                avatar: null,
                description: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                coins: 10000,
                verified: true,
                isDeveloper: true,
                status: 'online',
                lastSeen: new Date(),
                createdAt: new Date(),
                gifts: []
            },
            {
                id: '2',
                username: 'user1',
                displayName: '–ê–ª–µ–∫—Å–µ–π',
                email: 'user1@example.com',
                password: 'user123',
                avatar: null,
                description: '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                coins: 1000,
                verified: false,
                isDeveloper: false,
                status: 'online',
                lastSeen: new Date(),
                createdAt: new Date(),
                gifts: []
            },
            {
                id: '3',
                username: 'user2',
                displayName: '–ú–∞—Ä–∏—è',
                email: 'user2@example.com',
                password: 'user123',
                avatar: null,
                description: '–õ—é–±–∏—Ç–µ–ª—å –º—É–∑—ã–∫–∏',
                coins: 1500,
                verified: true,
                isDeveloper: false,
                status: 'offline',
                lastSeen: new Date(Date.now() - 30 * 60 * 1000), // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                createdAt: new Date(),
                gifts: []
            }
        ];
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏
    if (gifts.length === 0) {
        gifts = [
            {
                id: '1',
                name: '–ó–æ–ª–æ—Ç–∞—è –∫–æ—Ä–æ–Ω–∞',
                type: 'crown',
                preview: 'üëë',
                price: 500
            },
            {
                id: '2',
                name: '–°–µ—Ä–¥–µ—á–∫–æ',
                type: 'heart',
                preview: '‚ù§Ô∏è',
                price: 100
            },
            {
                id: '3',
                name: '–ó–≤–µ–∑–¥–∞',
                type: 'star',
                preview: '‚≠ê',
                price: 200
            },
            {
                id: '4',
                name: '–ö–∞—Ä—Ç–∏–Ω–∫–∞',
                type: 'image',
                preview: 'üñºÔ∏è',
                price: 300
            },
            {
                id: '5',
                name: '–ì–∏—Ñ–∫–∞',
                type: 'gif',
                preview: 'üéÜ',
                price: 400
            }
        ];
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    if (promoCodes.length === 0) {
        promoCodes = [
            {
                id: '1',
                code: 'WELCOME1000',
                coins: 1000,
                max_uses: 0,
                used_count: 0,
                created_at: new Date()
            },
            {
                id: '2',
                code: 'NEWUSER500',
                coins: 500,
                max_uses: 100,
                used_count: 45,
                created_at: new Date()
            }
        ];
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ 
            success: false, 
            message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
        });
    }

    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
        // –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = users.find(u => u.id === token);
        if (!user) {
            return res.status(403).json({ 
                success: false, 
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' 
            });
        }

        req.user = user;
        next();
    } catch (error) {
        return res.status(403).json({ 
            success: false, 
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' 
        });
    }
}

// Routes

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'main.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞
app.get('/login.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

// –õ–æ–≥–∏–Ω
app.post('/api/login', (req, res) => {
    const { username, password } = req.body;
    
    const user = users.find(u => u.username === username && u.password === password);
    if (!user) {
        return res.status(401).json({
            success: false,
            message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
        });
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JWT —Ç–æ–∫–µ–Ω
    // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ç–æ–∫–µ–Ω
    res.json({
        success: true,
        token: user.id,
        user: user
    });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/api/check-auth', authenticateToken, (req, res) => {
    res.json({ 
        authenticated: true,
        user: req.user
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/current-user', authenticateToken, (req, res) => {
    res.json({
        success: true,
        user: req.user
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', authenticateToken, (req, res) => {
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
    const otherUsers = users.filter(user => user.id !== req.user.id);
    res.json({
        success: true,
        users: otherUsers
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
app.get('/api/users/:id', authenticateToken, (req, res) => {
    const user = users.find(u => u.id === req.params.id);
    if (!user) {
        return res.status(404).json({
            success: false,
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
    }

    res.json({
        success: true,
        user: user
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages', authenticateToken, (req, res) => {
    const { userId, toUserId } = req.query;
    
    const chatMessages = messages.filter(msg => 
        (msg.senderId === userId && msg.toUserId === toUserId) ||
        (msg.senderId === toUserId && msg.toUserId === userId)
    );

    res.json({
        success: true,
        messages: chatMessages
    });
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/api/messages/send', authenticateToken, (req, res) => {
    const { userId, toUserId, text, type } = req.body;

    const message = {
        id: generateId(),
        senderId: userId,
        toUserId: toUserId,
        text: text,
        type: type || 'text',
        timestamp: new Date(),
        displayName: req.user.displayName
    };

    messages.push(message);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Socket.IO
    io.emit('new_message', message);

    res.json({
        success: true,
        message: message
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
app.get('/api/posts', authenticateToken, (req, res) => {
    const postsWithUserInfo = posts.map(post => {
        const user = users.find(u => u.id === post.userId);
        return {
            ...post,
            userName: user ? user.displayName : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
            userAvatar: user ? user.avatar : null,
            userVerified: user ? user.verified : false,
            userDeveloper: user ? user.isDeveloper : false
        };
    });

    res.json({
        success: true,
        posts: postsWithUserInfo
    });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
app.post('/api/posts', authenticateToken, (req, res) => {
    const { text, image } = req.body;

    const post = {
        id: generateId(),
        userId: req.user.id,
        text: text,
        image: image,
        likes: [],
        comments: [],
        views: 0,
        createdAt: new Date()
    };

    posts.push(post);

    res.json({
        success: true,
        post: post
    });
});

// –õ–∞–π–∫ –ø–æ—Å—Ç–∞
app.post('/api/posts/:id/like', authenticateToken, (req, res) => {
    const postId = req.params.id;
    const post = posts.find(p => p.id === postId);

    if (!post) {
        return res.status(404).json({
            success: false,
            message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
    }

    const likeIndex = post.likes.indexOf(req.user.id);
    if (likeIndex === -1) {
        post.likes.push(req.user.id);
    } else {
        post.likes.splice(likeIndex, 1);
    }

    res.json({
        success: true,
        likes: post.likes
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤
app.get('/api/gifts', authenticateToken, (req, res) => {
    res.json({
        success: true,
        gifts: gifts
    });
});

// –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞
app.post('/api/gifts/:id/buy', authenticateToken, (req, res) => {
    const giftId = req.params.id;
    const { toUserId } = req.body;
    const gift = gifts.find(g => g.id === giftId);

    if (!gift) {
        return res.status(404).json({
            success: false,
            message: '–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
    }

    if (req.user.coins < gift.price) {
        return res.status(400).json({
            success: false,
            message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ E-COIN'
        });
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    req.user.coins -= gift.price;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (!req.user.gifts) {
        req.user.gifts = [];
    }

    const userGift = {
        id: generateId(),
        giftId: gift.id,
        giftName: gift.name,
        giftType: gift.type,
        purchasedAt: new Date(),
        fromUserId: req.user.id
    };

    req.user.gifts.push(userGift);

    // –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (toUserId) {
        const toUser = users.find(u => u.id === toUserId);
        if (toUser) {
            if (!toUser.gifts) {
                toUser.gifts = [];
            }
            toUser.gifts.push({
                ...userGift,
                fromUserId: req.user.id
            });

            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ
            const giftMessage = {
                id: generateId(),
                senderId: req.user.id,
                toUserId: toUserId,
                type: 'gift',
                giftName: gift.name,
                giftType: gift.type,
                giftPrice: gift.price,
                timestamp: new Date(),
                displayName: req.user.displayName
            };

            messages.push(giftMessage);
            io.emit('new_message', giftMessage);
        }
    }

    res.json({
        success: true,
        giftName: gift.name,
        newBalance: req.user.coins
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
app.get('/api/promo-codes', authenticateToken, (req, res) => {
    res.json({
        success: true,
        promoCodes: promoCodes
    });
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
app.post('/api/promo-codes/activate', authenticateToken, (req, res) => {
    const { code } = req.body;
    const promoCode = promoCodes.find(p => p.code === code);

    if (!promoCode) {
        return res.status(404).json({
            success: false,
            message: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
    }

    if (promoCode.max_uses > 0 && promoCode.used_count >= promoCode.max_uses) {
        return res.status(400).json({
            success: false,
            message: '–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑'
        });
    }

    // –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
    req.user.coins += promoCode.coins;
    promoCode.used_count++;

    res.json({
        success: true,
        message: `–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ ${promoCode.coins} E-COIN`,
        coins: promoCode.coins
    });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
app.post('/api/update-profile', authenticateToken, (req, res) => {
    const { displayName, description, avatar } = req.body;

    if (displayName) {
        req.user.displayName = displayName;
    }

    if (description !== undefined) {
        req.user.description = description;
    }

    if (avatar) {
        req.user.avatar = avatar;
    }

    res.json({
        success: true,
        user: req.user
    });
});

// –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/admin/stats', authenticateToken, (req, res) => {
    if (!req.user.isDeveloper) {
        return res.status(403).json({
            success: false,
            message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
        });
    }

    res.json({
        success: true,
        stats: {
            totalUsers: users.length,
            totalMessages: messages.length,
            totalPosts: posts.length
        }
    });
});

// –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
app.get('/api/user/:id/transactions', authenticateToken, (req, res) => {
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ
    const transactions = [
        {
            description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ–Ω—É—Å',
            date: req.user.createdAt,
            amount: 1000
        },
        {
            description: '–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ "–ó–æ–ª–æ—Ç–∞—è –∫–æ—Ä–æ–Ω–∞"',
            date: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
            amount: -500
        },
        {
            description: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ WELCOME1000',
            date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
            amount: 1000
        }
    ];

    res.json({
        success: true,
        transactions: transactions
    });
});

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
app.post('/api/logout', authenticateToken, (req, res) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    res.json({
        success: true,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    });
});

// Socket.IO connection
io.on('connection', (socket) => {
    console.log('üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

    socket.on('user_online', (userId) => {
        const user = users.find(u => u.id === userId);
        if (user) {
            user.status = 'online';
            user.lastSeen = new Date();
            
            io.emit('user_status_changed', {
                userId: userId,
                status: 'online',
                lastSeen: user.lastSeen
            });
        }
    });

    socket.on('user_typing', (data) => {
        socket.broadcast.emit('user_typing', data);
    });

    socket.on('disconnect', () => {
        console.log('üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initializeData();

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìß –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
});
