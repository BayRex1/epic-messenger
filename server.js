const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const { Pool } = require('pg');

const app = express();
const server = http.createServer(app);

const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(50) PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        username VARCHAR(50) UNIQUE NOT NULL,
        display_name VARCHAR(100) NOT NULL,
        password VARCHAR(255) NOT NULL,
        status VARCHAR(20) DEFAULT 'online',
        verified BOOLEAN DEFAULT false,
        is_developer BOOLEAN DEFAULT false,
        avatar TEXT,
        description TEXT DEFAULT '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Epic Messenger',
        coins INTEGER DEFAULT 1000,
        gifts JSONB DEFAULT '[]',
        used_promocodes JSONB DEFAULT '[]',
        created_at TIMESTAMP DEFAULT NOW(),
        deleted BOOLEAN DEFAULT false
      )
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS messages (
        id VARCHAR(50) PRIMARY KEY,
        user_id VARCHAR(50) REFERENCES users(id),
        username VARCHAR(50) NOT NULL,
        display_name VARCHAR(100) NOT NULL,
        text TEXT NOT NULL,
        to_user_id VARCHAR(50) REFERENCES users(id),
        timestamp TIMESTAMP DEFAULT NOW(),
        verified BOOLEAN DEFAULT false,
        is_developer BOOLEAN DEFAULT false,
        type VARCHAR(20) DEFAULT 'text',
        file_data TEXT,
        file_name VARCHAR(255),
        file_type VARCHAR(50),
        file_size INTEGER DEFAULT 0,
        gift_id VARCHAR(50),
        gift_name VARCHAR(255),
        gift_price INTEGER,
        deleted BOOLEAN DEFAULT false
      )
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å—Ç–æ–≤
    await pool.query(`
      CREATE TABLE IF NOT EXISTS posts (
        id VARCHAR(50) PRIMARY KEY,
        user_id VARCHAR(50) REFERENCES users(id),
        text TEXT NOT NULL,
        image TEXT,
        likes JSONB DEFAULT '[]',
        comments JSONB DEFAULT '[]',
        views INTEGER DEFAULT 0,
        timestamp TIMESTAMP DEFAULT NOW()
      )
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–∞—Ä–∫–æ–≤
    await pool.query(`
      CREATE TABLE IF NOT EXISTS gifts (
        id VARCHAR(50) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price INTEGER NOT NULL,
        image TEXT,
        type VARCHAR(20) NOT NULL,
        created_by VARCHAR(50) REFERENCES users(id),
        created_at TIMESTAMP DEFAULT NOW(),
        deleted BOOLEAN DEFAULT false
      )
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    await pool.query(`
      CREATE TABLE IF NOT EXISTS promocodes (
        id VARCHAR(50) PRIMARY KEY,
        code VARCHAR(100) UNIQUE NOT NULL,
        coins INTEGER NOT NULL,
        max_uses INTEGER DEFAULT 1,
        used_count INTEGER DEFAULT 0,
        used_by JSONB DEFAULT '[]',
        created_by VARCHAR(50) REFERENCES users(id),
        created_at TIMESTAMP DEFAULT NOW(),
        deleted BOOLEAN DEFAULT false
      )
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ BayRex
    await pool.query(`
      CREATE TABLE IF NOT EXISTS bayrex_usernames (
        id VARCHAR(50) PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        display_name VARCHAR(100) NOT NULL,
        assigned_to VARCHAR(50) REFERENCES users(id),
        created_at TIMESTAMP DEFAULT NOW(),
        deleted BOOLEAN DEFAULT false
      )
    `);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const giftsCount = await pool.query('SELECT COUNT(*) FROM gifts WHERE deleted = false');
    if (parseInt(giftsCount.rows[0].count) === 0) {
      await pool.query(`
        INSERT INTO gifts (id, name, price, image, type, created_by, created_at) VALUES
        ('1', '–ó–æ–ª–æ—Ç–∞—è –∫–æ—Ä–æ–Ω–∞', 100, null, 'image', 'system', NOW()),
        ('2', '–ê–Ω–∏–º–∞—Ü–∏—è —Å —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–º', 50, null, 'gif', 'system', NOW())
      `);
    }

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkAndFixDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ views –≤ posts
    const checkViews = await pool.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name='posts' and column_name='views'
    `);

    if (checkViews.rows.length === 0) {
      console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É views –≤ —Ç–∞–±–ª–∏—Ü—É posts...');
      await pool.query('ALTER TABLE posts ADD COLUMN views INTEGER DEFAULT 0');
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ views –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É bayrex_usernames
    const checkBayrexUsernames = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_name='bayrex_usernames'
    `);

    if (checkBayrexUsernames.rows.length === 0) {
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É bayrex_usernames...');
      await pool.query(`
        CREATE TABLE IF NOT EXISTS bayrex_usernames (
          id VARCHAR(50) PRIMARY KEY,
          username VARCHAR(50) UNIQUE NOT NULL,
          display_name VARCHAR(100) NOT NULL,
          assigned_to VARCHAR(50) REFERENCES users(id),
          created_at TIMESTAMP DEFAULT NOW(),
          deleted BOOLEAN DEFAULT false
        )
      `);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ bayrex_usernames —Å–æ–∑–¥–∞–Ω–∞');
    }

    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initDatabase().then(() => {
  checkAndFixDatabase();
});

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static(__dirname));

const onlineUsers = new Map();

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/main.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'main.html'));
});

app.get('/login.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'login.html'));
});

// Health check –¥–ª—è Render.com
app.get('/health', async (req, res) => {
  try {
    const usersCount = await pool.query('SELECT COUNT(*) FROM users WHERE deleted = false');
    const messagesCount = await pool.query('SELECT COUNT(*) FROM messages WHERE deleted = false');
    const postsCount = await pool.query('SELECT COUNT(*) FROM posts');
    const giftsCount = await pool.query('SELECT COUNT(*) FROM gifts WHERE deleted = false');
    const promocodesCount = await pool.query('SELECT COUNT(*) FROM promocodes WHERE deleted = false');

    res.json({ 
      status: 'OK', 
      timestamp: new Date().toISOString(),
      users: parseInt(usersCount.rows[0].count),
      messages: parseInt(messagesCount.rows[0].count),
      posts: parseInt(postsCount.rows[0].count),
      gifts: parseInt(giftsCount.rows[0].count),
      promocodes: parseInt(promocodesCount.rows[0].count),
      storage: 'PostgreSQL'
    });
  } catch (error) {
    res.status(500).json({ status: 'ERROR', error: error.message });
  }
});

// API routes
app.post('/api/register', async (req, res) => {
  try {
    const { email, username, displayName, password } = req.body;

    if (!email || !username || !displayName || !password) {
      return res.json({ success: false, message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π username (case insensitive)
    const existingUser = await pool.query(
      'SELECT * FROM users WHERE LOWER(username) = LOWER($1) AND deleted = false',
      [username]
    );

    if (existingUser.rows.length > 0) {
      return res.json({ success: false, message: '–Æ–∑–µ—Ä–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email
    const existingEmail = await pool.query(
      'SELECT * FROM users WHERE email = $1 AND deleted = false',
      [email]
    );

    if (existingEmail.rows.length > 0) {
      return res.json({ success: false, message: 'Email —É–∂–µ –∑–∞–Ω—è—Ç' });
    }

    const userId = Date.now().toString();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞–µ–º –ø—Ä–∞–≤–∞ –µ—Å–ª–∏ username BayRex (case insensitive)
    const isBayRex = username.toLowerCase() === 'bayrex';

    const newUser = {
      id: userId,
      email,
      username,
      display_name: displayName,
      password: password,
      verified: isBayRex,
      is_developer: isBayRex,
      coins: 1000,
      gifts: [],
      used_promocodes: []
    };

    await pool.query(
      `INSERT INTO users (id, email, username, display_name, password, verified, is_developer, coins, gifts, used_promocodes) 
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
      [newUser.id, newUser.email, newUser.username, newUser.display_name, newUser.password, 
       newUser.verified, newUser.is_developer, newUser.coins, JSON.stringify(newUser.gifts), 
       JSON.stringify(newUser.used_promocodes)]
    );

    res.json({ 
      success: true, 
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 
      user: {
        id: newUser.id,
        email: newUser.email,
        username: newUser.username,
        displayName: newUser.display_name,
        verified: newUser.verified,
        isDeveloper: newUser.is_developer,
        coins: newUser.coins,
        gifts: newUser.gifts,
        usedPromocodes: newUser.used_promocodes,
        status: 'online',
        avatar: null,
        description: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Epic Messenger',
        createdAt: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('Error in register:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await pool.query(
      `SELECT * FROM users WHERE 
       (email = $1 OR LOWER(username) = LOWER($1)) AND 
       password = $2 AND deleted = false`,
      [email, password]
    );

    if (user.rows.length === 0) {
      return res.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π email/—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const userData = user.rows[0];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ–Ω–ª–∞–π–Ω
    await pool.query(
      'UPDATE users SET status = $1 WHERE id = $2',
      ['online', userData.id]
    );

    res.json({ 
      success: true, 
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!', 
      user: {
        id: userData.id,
        email: userData.email,
        username: userData.username,
        displayName: userData.display_name,
        status: 'online',
        verified: userData.verified,
        isDeveloper: userData.is_developer,
        avatar: userData.avatar,
        description: userData.description,
        coins: userData.coins,
        gifts: userData.gifts || [],
        usedPromocodes: userData.used_promocodes || [],
        createdAt: userData.created_at
      }
    });
  } catch (error) {
    console.error('Error in login:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
  }
});

app.post('/api/update-profile', async (req, res) => {
  try {
    const { userId, username, displayName, description, status, avatarData } = req.body;

    if (!userId) {
      return res.json({ success: false, message: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (userResult.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const currentUser = userResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º username –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—è–µ—Ç—Å—è
    if (username && username !== currentUser.username) {
      const existingUser = await pool.query(
        'SELECT * FROM users WHERE LOWER(username) = LOWER($1) AND id != $2 AND deleted = false',
        [username, userId]
      );

      if (existingUser.rows.length > 0) {
        return res.json({ success: false, message: '–Æ–∑–µ—Ä–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç' });
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updates = [];
    const values = [];
    let paramCount = 1;

    if (username) {
      updates.push(`username = $${paramCount}`);
      values.push(username);
      paramCount++;
    }

    if (displayName) {
      updates.push(`display_name = $${paramCount}`);
      values.push(displayName);
      paramCount++;
    }

    if (description !== undefined) {
      updates.push(`description = $${paramCount}`);
      values.push(description);
      paramCount++;
    }

    if (status) {
      updates.push(`status = $${paramCount}`);
      values.push(status);
      paramCount++;
    }

    if (avatarData !== undefined) {
      updates.push(`avatar = $${paramCount}`);
      values.push(avatarData);
      paramCount++;
    }

    if (updates.length === 0) {
      return res.json({ success: false, message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º userId –≤ values
    values.push(userId);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await pool.query(
      `UPDATE users SET ${updates.join(', ')} WHERE id = $${paramCount}`,
      values
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUserResult = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    const updatedUser = updatedUserResult.rows[0];

    res.json({ 
      success: true, 
      message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
      user: {
        id: updatedUser.id,
        email: updatedUser.email,
        username: updatedUser.username,
        displayName: updatedUser.display_name,
        status: updatedUser.status,
        verified: updatedUser.verified,
        isDeveloper: updatedUser.is_developer,
        avatar: updatedUser.avatar,
        description: updatedUser.description,
        coins: updatedUser.coins,
        gifts: updatedUser.gifts || [],
        usedPromocodes: updatedUser.used_promocodes || [],
        createdAt: updatedUser.created_at
      }
    });
  } catch (error) {
    console.error('Error updating profile:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

app.get('/api/search-users', async (req, res) => {
  try {
    const { query, currentUserId } = req.query;

    if (!query || !currentUserId) {
      return res.json([]);
    }

    const searchTerm = `%${query.toLowerCase().trim()}%`;
    const usersResult = await pool.query(
      `SELECT * FROM users WHERE 
       id != $1 AND deleted = false AND
       (LOWER(username) LIKE $2 OR
        LOWER(display_name) LIKE $2 OR
        LOWER(email) LIKE $2)`,
      [currentUserId, searchTerm]
    );

    const usersFormatted = usersResult.rows.map(user => ({
      id: user.id,
      email: user.email,
      username: user.username,
      displayName: user.display_name,
      status: user.status,
      verified: user.verified,
      isDeveloper: user.is_developer,
      avatar: user.avatar,
      description: user.description,
      coins: user.coins,
      gifts: user.gifts || [],
      usedPromocodes: user.used_promocodes || [],
      createdAt: user.created_at
    }));

    res.json(usersFormatted);
  } catch (error) {
    console.error('Error searching users:', error);
    res.json([]);
  }
});

app.get('/api/users', async (req, res) => {
  try {
    const { currentUserId } = req.query;
    const users = await pool.query(
      'SELECT * FROM users WHERE id != $1 AND deleted = false',
      [currentUserId]
    );

    const usersFormatted = users.rows.map(user => ({
      id: user.id,
      email: user.email,
      username: user.username,
      displayName: user.display_name,
      status: user.status,
      verified: user.verified,
      isDeveloper: user.is_developer,
      avatar: user.avatar,
      description: user.description,
      coins: user.coins,
      gifts: user.gifts || [],
      usedPromocodes: user.used_promocodes || [],
      createdAt: user.created_at
    }));

    res.json(usersFormatted);
  } catch (error) {
    console.error('Error getting users:', error);
    res.json([]);
  }
});

app.get('/api/user-chats', async (req, res) => {
  try {
    const { currentUserId } = req.query;

    if (!currentUserId) {
      return res.json([]);
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∞
    const chatsResult = await pool.query(
      `SELECT DISTINCT u.* FROM users u
       JOIN messages m ON (u.id = m.user_id OR u.id = m.to_user_id)
       WHERE (m.user_id = $1 OR m.to_user_id = $1) 
       AND u.id != $1 AND u.deleted = false
       AND m.deleted = false`,
      [currentUserId]
    );

    const chatUsers = chatsResult.rows.map(user => ({
      id: user.id,
      email: user.email,
      username: user.username,
      displayName: user.display_name,
      status: user.status,
      verified: user.verified,
      isDeveloper: user.is_developer,
      avatar: user.avatar,
      description: user.description,
      coins: user.coins,
      gifts: user.gifts || [],
      usedPromocodes: user.used_promocodes || [],
      createdAt: user.created_at
    }));

    res.json(chatUsers);
  } catch (error) {
    console.error('Error getting user chats:', error);
    res.json([]);
  }
});

app.get('/api/user/:id', async (req, res) => {
  try {
    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [req.params.id]
    );

    if (user.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userData = user.rows[0];

    res.json({
      success: true,
      user: {
        id: userData.id,
        email: userData.email,
        username: userData.username,
        displayName: userData.display_name,
        status: userData.status,
        verified: userData.verified,
        isDeveloper: userData.is_developer,
        avatar: userData.avatar,
        description: userData.description,
        coins: userData.coins,
        gifts: userData.gifts || [],
        usedPromocodes: userData.used_promocodes || [],
        createdAt: userData.created_at
      }
    });
  } catch (error) {
    console.error('Error getting user:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

// –ü–æ—Å—Ç—ã API
app.get('/api/posts', async (req, res) => {
  try {
    const posts = await pool.query(`
      SELECT p.*, u.username, u.display_name, u.avatar, u.verified, u.is_developer 
      FROM posts p 
      LEFT JOIN users u ON p.user_id = u.id AND u.deleted = false 
      ORDER BY p.timestamp DESC
    `);

    const postsWithUsers = posts.rows.map(post => ({
      id: post.id,
      userId: post.user_id,
      text: post.text,
      image: post.image,
      likes: post.likes || [],
      comments: post.comments || [],
      views: post.views || 0,
      timestamp: post.timestamp,
      user: {
        id: post.user_id,
        username: post.username || 'deleted_user',
        displayName: post.display_name || '–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        avatar: post.avatar,
        verified: post.verified || false,
        isDeveloper: post.is_developer || false
      }
    }));

    res.json(postsWithUsers);
  } catch (error) {
    console.error('Error getting posts:', error);
    res.json([]);
  }
});

app.get('/api/user-posts/:userId', async (req, res) => {
  try {
    const userId = req.params.userId;
    
    const posts = await pool.query(`
      SELECT p.*, u.username, u.display_name, u.avatar, u.verified, u.is_developer 
      FROM posts p 
      LEFT JOIN users u ON p.user_id = u.id AND u.deleted = false 
      WHERE p.user_id = $1
      ORDER BY p.timestamp DESC
    `, [userId]);

    const postsWithUsers = posts.rows.map(post => ({
      id: post.id,
      userId: post.user_id,
      text: post.text,
      image: post.image,
      likes: post.likes || [],
      comments: post.comments || [],
      views: post.views || 0,
      timestamp: post.timestamp,
      user: {
        id: post.user_id,
        username: post.username || 'deleted_user',
        displayName: post.display_name || '–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        avatar: post.avatar,
        verified: post.verified || false,
        isDeveloper: post.is_developer || false
      }
    }));

    res.json(postsWithUsers);
  } catch (error) {
    console.error('Error getting user posts:', error);
    res.json([]);
  }
});

app.post('/api/posts', async (req, res) => {
  try {
    const { userId, text, image } = req.body;

    if (!userId || !text) {
      return res.json({ success: false, message: '–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userData = user.rows[0];
    const postId = Date.now().toString();

    await pool.query(
      'INSERT INTO posts (id, user_id, text, image, likes, comments, views) VALUES ($1, $2, $3, $4, $5, $6, $7)',
      [postId, userId, text, image || null, JSON.stringify([]), JSON.stringify([]), 0]
    );

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const newPost = await pool.query(`
      SELECT p.*, u.username, u.display_name, u.avatar, u.verified, u.is_developer 
      FROM posts p 
      LEFT JOIN users u ON p.user_id = u.id 
      WHERE p.id = $1
    `, [postId]);

    const postData = newPost.rows[0];

    res.json({ 
      success: true, 
      message: '–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω',
      post: {
        id: postData.id,
        userId: postData.user_id,
        text: postData.text,
        image: postData.image,
        likes: postData.likes || [],
        comments: postData.comments || [],
        views: postData.views || 0,
        timestamp: postData.timestamp,
        user: {
          id: postData.user_id,
          username: postData.username,
          displayName: postData.display_name,
          avatar: postData.avatar,
          verified: postData.verified,
          isDeveloper: postData.is_developer
        }
      }
    });
  } catch (error) {
    console.error('Error creating post:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞' });
  }
});

app.post('/api/posts/:id/like', async (req, res) => {
  try {
    const { userId } = req.body;
    const postId = req.params.id;

    const post = await pool.query('SELECT * FROM posts WHERE id = $1', [postId]);
    if (post.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const postData = post.rows[0];
    const likes = postData.likes || [];
    const likeIndex = likes.indexOf(userId);

    if (likeIndex === -1) {
      likes.push(userId);
    } else {
      likes.splice(likeIndex, 1);
    }

    await pool.query(
      'UPDATE posts SET likes = $1 WHERE id = $2',
      [JSON.stringify(likes), postId]
    );

    res.json({ 
      success: true, 
      likes: likes.length,
      isLiked: likeIndex === -1
    });
  } catch (error) {
    console.error('Error liking post:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

app.post('/api/posts/:id/comment', async (req, res) => {
  try {
    const { userId, text } = req.body;
    const postId = req.params.id;

    if (!userId || !text) {
      return res.json({ success: false, message: '–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const post = await pool.query('SELECT * FROM posts WHERE id = $1', [postId]);
    if (post.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userData = user.rows[0];
    const postData = post.rows[0];
    const comments = postData.comments || [];

    const comment = {
      id: Date.now().toString(),
      userId,
      text,
      timestamp: new Date().toISOString(),
      user: {
        id: userData.id,
        username: userData.username,
        displayName: userData.display_name,
        avatar: userData.avatar,
        verified: userData.verified,
        isDeveloper: userData.is_developer
      }
    };

    comments.push(comment);

    await pool.query(
      'UPDATE posts SET comments = $1 WHERE id = $2',
      [JSON.stringify(comments), postId]
    );

    res.json({ 
      success: true, 
      message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω',
      comment: comment
    });
  } catch (error) {
    console.error('Error adding comment:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
  }
});

app.post('/api/posts/:id/view', async (req, res) => {
  try {
    const postId = req.params.id;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    await pool.query(
      'UPDATE posts SET views = COALESCE(views, 0) + 1 WHERE id = $1',
      [postId]
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const post = await pool.query('SELECT views FROM posts WHERE id = $1', [postId]);

    res.json({ 
      success: true, 
      message: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Å—á–∏—Ç–∞–Ω',
      views: post.rows[0]?.views || 0
    });
  } catch (error) {
    console.error('Error counting view:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

app.delete('/api/posts/:id', async (req, res) => {
  try {
    const postId = req.params.id;
    const { userId } = req.body;

    const post = await pool.query('SELECT * FROM posts WHERE id = $1', [postId]);
    if (post.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const postData = post.rows[0];
    if (postData.user_id !== userId) {
      return res.json({ success: false, message: '–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã' });
    }

    await pool.query('DELETE FROM posts WHERE id = $1', [postId]);

    res.json({ 
      success: true, 
      message: '–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('Error deleting post:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

// BayRex usernames API
app.get('/api/bayrex-usernames', async (req, res) => {
  try {
    const { userId } = req.query;
    
    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0 || user.rows[0].username.toLowerCase() !== 'bayrex') {
      return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    const usernames = await pool.query(`
      SELECT * FROM bayrex_usernames WHERE deleted = false
    `);

    res.json(usernames.rows);
  } catch (error) {
    console.error('Error getting bayrex usernames:', error);
    res.json([]);
  }
});

app.post('/api/bayrex-usernames', async (req, res) => {
  try {
    const { userId, username, displayName } = req.body;

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0 || user.rows[0].username.toLowerCase() !== 'bayrex') {
      return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    if (!username || !displayName) {
      return res.json({ success: false, message: '–Æ–∑–µ—Ä–Ω–µ–π–º –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ 30 —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
    const existingCount = await pool.query(`
      SELECT COUNT(*) FROM bayrex_usernames WHERE deleted = false
    `);

    if (parseInt(existingCount.rows[0].count) >= 30) {
      return res.json({ success: false, message: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 30 —é–∑–µ—Ä–Ω–µ–π–º–æ–≤' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞
    const existingUsername = await pool.query(`
      SELECT * FROM bayrex_usernames WHERE username = $1 AND deleted = false
    `, [username]);

    if (existingUsername.rows.length > 0) {
      return res.json({ success: false, message: '–Æ–∑–µ—Ä–Ω–µ–π–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const usernameId = Date.now().toString();

    await pool.query(`
      INSERT INTO bayrex_usernames (id, username, display_name, assigned_to) 
      VALUES ($1, $2, $3, $4)
    `, [usernameId, username, displayName, userId]);

    res.json({ 
      success: true, 
      message: '–Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–±–∞–≤–ª–µ–Ω'
    });
  } catch (error) {
    console.error('Error creating bayrex username:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

app.delete('/api/bayrex-usernames/:id', async (req, res) => {
  try {
    const { userId } = req.body;
    const usernameId = req.params.id;

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0 || user.rows[0].username.toLowerCase() !== 'bayrex') {
      return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    await pool.query(`
      UPDATE bayrex_usernames SET deleted = true WHERE id = $1
    `, [usernameId]);

    res.json({ 
      success: true, 
      message: '–Æ–∑–µ—Ä–Ω–µ–π–º —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('Error deleting bayrex username:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

app.post('/api/bayrex-usernames/:id/assign', async (req, res) => {
  try {
    const { userId, targetUserId } = req.body;
    const usernameId = req.params.id;

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0 || user.rows[0].username.toLowerCase() !== 'bayrex') {
      return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    const targetUser = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [targetUserId]
    );

    if (targetUser.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    await pool.query(`
      UPDATE bayrex_usernames SET assigned_to = $1 WHERE id = $2
    `, [targetUserId, usernameId]);

    res.json({ 
      success: true, 
      message: '–Æ–∑–µ—Ä–Ω–µ–π–º –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    });
  } catch (error) {
    console.error('Error assigning bayrex username:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

// –ü–æ–¥–∞—Ä–∫–∏ API
app.get('/api/gifts', async (req, res) => {
  try {
    const gifts = await pool.query('SELECT * FROM gifts WHERE deleted = false');
    res.json(gifts.rows);
  } catch (error) {
    console.error('Error getting gifts:', error);
    res.json([]);
  }
});

app.post('/api/gifts', async (req, res) => {
  try {
    const { userId, name, price, image, type } = req.body;

    if (!userId || !name || !price || !image || !type) {
      return res.json({ success: false, message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0 || !user.rows[0].is_developer) {
      return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const allowedTypes = ['png', 'svg', 'gif', 'webp'];
    const fileType = type.toLowerCase();
    if (!allowedTypes.includes(fileType)) {
      return res.json({ success: false, message: '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PNG, SVG, GIF –∏ WebP —Ñ–∞–π–ª—ã' });
    }

    const giftId = Date.now().toString();

    await pool.query(
      'INSERT INTO gifts (id, name, price, image, type, created_by) VALUES ($1, $2, $3, $4, $5, $6)',
      [giftId, name, parseInt(price), image, fileType, userId]
    );

    const gift = {
      id: giftId,
      name,
      price: parseInt(price),
      image,
      type: fileType,
      createdBy: userId,
      createdAt: new Date().toISOString(),
      deleted: false
    };

    res.json({ 
      success: true, 
      message: '–ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω',
      gift
    });
  } catch (error) {
    console.error('Error creating gift:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

app.post('/api/gifts/buy', async (req, res) => {
  try {
    const { userId, giftId, toUserId, message } = req.body;

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );
    const toUser = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [toUserId]
    );
    const gift = await pool.query(
      'SELECT * FROM gifts WHERE id = $1 AND deleted = false',
      [giftId]
    );

    if (user.rows.length === 0 || toUser.rows.length === 0 || gift.rows.length === 0) {
      return res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞' });
    }

    const userData = user.rows[0];
    const toUserData = toUser.rows[0];
    const giftData = gift.rows[0];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const toUserGifts = toUserData.gifts || [];
    toUserGifts.push({
      giftId: giftData.id,
      fromUserId: userId,
      fromUserName: userData.display_name,
      timestamp: new Date().toISOString()
    });

    await pool.query(
      'UPDATE users SET gifts = $1 WHERE id = $2',
      [JSON.stringify(toUserGifts), toUserId]
    );

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ
    const messageId = Date.now().toString();
    const giftMessage = {
      id: messageId,
      userId: userId,
      username: userData.username,
      displayName: userData.display_name,
      text: message ? `üéÅ –ü–æ–¥–∞—Ä–∏–ª(–∞) –ø–æ–¥–∞—Ä–æ–∫ "${giftData.name}": ${message}` : `üéÅ –ü–æ–¥–∞—Ä–∏–ª(–∞) –ø–æ–¥–∞—Ä–æ–∫ "${giftData.name}"`,
      toUserId: toUserId,
      timestamp: new Date().toISOString(),
      verified: userData.verified,
      isDeveloper: userData.is_developer,
      type: 'gift',
      giftId: giftData.id,
      giftName: giftData.name,
      giftPrice: giftData.price,
      giftImage: giftData.image,
      giftType: giftData.type
    };

    await pool.query(
      `INSERT INTO messages (id, user_id, username, display_name, text, to_user_id, 
       verified, is_developer, type, gift_id, gift_name, gift_price) 
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)`,
      [messageId, userId, userData.username, userData.display_name, giftMessage.text, toUserId,
       userData.verified, userData.is_developer, 'gift', giftData.id, giftData.name, giftData.price]
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
    const recipientEntry = Array.from(onlineUsers.entries())
      .find(([_, u]) => u.userId === toUserId);

    if (recipientEntry) {
      const [recipientSocketId, recipientUser] = recipientEntry;
      io.to(recipientSocketId).emit('new_message', giftMessage);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ
      io.to(recipientSocketId).emit('gift_received', {
        fromUser: {
          id: userData.id,
          username: userData.username,
          displayName: userData.display_name,
          avatar: userData.avatar,
          verified: userData.verified,
          isDeveloper: userData.is_developer
        },
        gift: giftData,
        message: message,
        timestamp: new Date().toISOString()
      });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    const senderEntry = Array.from(onlineUsers.entries())
      .find(([_, u]) => u.userId === userId);

    if (senderEntry) {
      const [senderSocketId] = senderEntry;
      io.to(senderSocketId).emit('gift_sent', {
        toUser: {
          id: toUserData.id,
          username: toUserData.username,
          displayName: toUserData.display_name,
          avatar: toUserData.avatar
        },
        gift: giftData,
        message: message,
        timestamp: new Date().toISOString()
      });
    }

    res.json({ 
      success: true, 
      message: '–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
      gift: giftData
    });
  } catch (error) {
    console.error('Error buying gift:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

// –ü—Ä–æ–º–æ–∫–æ–¥—ã API
app.get('/api/promocodes', async (req, res) => {
  try {
    const { userId } = req.query;

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0 || !user.rows[0].is_developer) {
      return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    const promocodes = await pool.query('SELECT * FROM promocodes WHERE deleted = false');
    res.json(promocodes.rows);
  } catch (error) {
    console.error('Error getting promocodes:', error);
    res.json([]);
  }
});

app.post('/api/promocodes', async (req, res) => {
  try {
    const { userId, code, coins, maxUses } = req.body;

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0 || !user.rows[0].is_developer) {
      return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    if (!code || !coins) {
      return res.json({ success: false, message: '–ö–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const existingPromo = await pool.query(
      'SELECT * FROM promocodes WHERE code = $1 AND deleted = false',
      [code.toUpperCase()]
    );

    if (existingPromo.rows.length > 0) {
      return res.json({ success: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const promocodeId = Date.now().toString();

    await pool.query(
      'INSERT INTO promocodes (id, code, coins, max_uses, used_count, used_by, created_by) VALUES ($1, $2, $3, $4, $5, $6, $7)',
      [promocodeId, code.toUpperCase(), parseInt(coins), maxUses || 1, 0, JSON.stringify([]), userId]
    );

    const promocode = {
      id: promocodeId,
      code: code.toUpperCase(),
      coins: parseInt(coins),
      maxUses: maxUses || 1,
      usedCount: 0,
      usedBy: [],
      createdBy: userId,
      createdAt: new Date().toISOString(),
      deleted: false
    };

    res.json({ 
      success: true, 
      message: '–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω',
      promocode
    });
  } catch (error) {
    console.error('Error creating promocode:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

app.post('/api/promocodes/use', async (req, res) => {
  try {
    const { userId, code } = req.body;

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userData = user.rows[0];
    const promocode = await pool.query(
      'SELECT * FROM promocodes WHERE code = $1 AND deleted = false AND used_count < max_uses',
      [code.toUpperCase()]
    );

    if (promocode.rows.length === 0) {
      return res.json({ success: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π' });
    }

    const promocodeData = promocode.rows[0];
    const usedBy = promocodeData.used_by || [];

    if (usedBy.includes(userId)) {
      return res.json({ success: false, message: '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥' });
    }

    // –ù–∞—á–∏—Å–ª—è–µ–º –∫–æ–∏–Ω—ã
    const newCoins = (userData.coins || 0) + promocodeData.coins;
    usedBy.push(userId);

    await pool.query(
      'UPDATE users SET coins = $1, used_promocodes = $2 WHERE id = $3',
      [newCoins, JSON.stringify([...(userData.used_promocodes || []), {
        code: promocodeData.code,
        coins: promocodeData.coins,
        usedAt: new Date().toISOString()
      }]), userId]
    );

    await pool.query(
      'UPDATE promocodes SET used_count = $1, used_by = $2 WHERE id = $3',
      [promocodeData.used_count + 1, JSON.stringify(usedBy), promocodeData.id]
    );

    res.json({ 
      success: true, 
      message: `–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${promocodeData.coins} E-COIN`,
      coins: newCoins
    });
  } catch (error) {
    console.error('Error using promocode:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

app.delete('/api/promocodes/:id', async (req, res) => {
  try {
    const { userId } = req.body;
    const promocodeId = req.params.id;

    const user = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (user.rows.length === 0 || !user.rows[0].is_developer) {
      return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    await pool.query(
      'UPDATE promocodes SET deleted = true WHERE id = $1',
      [promocodeId]
    );

    res.json({ 
      success: true, 
      message: '–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('Error deleting promocode:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

// –ê–¥–º–∏–Ω endpoints
app.get('/api/admin/users', async (req, res) => {
  try {
    const users = await pool.query('SELECT * FROM users WHERE deleted = false');
    const usersFormatted = users.rows.map(user => ({
      id: user.id,
      email: user.email,
      username: user.username,
      displayName: user.display_name,
      status: user.status,
      verified: user.verified,
      isDeveloper: user.is_developer,
      avatar: user.avatar,
      description: user.description,
      coins: user.coins,
      gifts: user.gifts || [],
      usedPromocodes: user.used_promocodes || [],
      createdAt: user.created_at,
      deleted: user.deleted
    }));

    res.json(usersFormatted);
  } catch (error) {
    console.error('Error getting admin users:', error);
    res.json([]);
  }
});

app.post('/api/admin/toggle-verify', async (req, res) => {
  try {
    const { userId, verified } = req.body;

    await pool.query(
      'UPDATE users SET verified = $1 WHERE id = $2',
      [verified, userId]
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
    const userEntry = Array.from(onlineUsers.entries())
      .find(([_, u]) => u.userId === userId);

    if (userEntry) {
      const [userSocketId] = userEntry;
      io.to(userSocketId).emit('user_verified', { 
        userId: userId, 
        verified: verified 
      });
    }

    res.json({ 
      success: true, 
      message: `–ê–∫–∫–∞—É–Ω—Ç ${verified ? '–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}` 
    });
  } catch (error) {
    console.error('Error toggling verify:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

app.post('/api/admin/toggle-developer', async (req, res) => {
  try {
    const { userId, isDeveloper } = req.body;

    await pool.query(
      'UPDATE users SET is_developer = $1 WHERE id = $2',
      [isDeveloper, userId]
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
    const userEntry = Array.from(onlineUsers.entries())
      .find(([_, u]) => u.userId === userId);

    if (userEntry) {
      const [userSocketId] = userEntry;
      io.to(userSocketId).emit('user_developer_updated', { 
        userId: userId, 
        isDeveloper: isDeveloper 
      });
    }

    res.json({ 
      success: true, 
      message: `–†–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ${isDeveloper ? '–Ω–∞–∑–Ω–∞—á–µ–Ω–∞' : '—Å–Ω—è—Ç–∞'}` 
    });
  } catch (error) {
    console.error('Error toggling developer:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

app.post('/api/admin/delete-user', async (req, res) => {
  try {
    const { userId, adminId } = req.body;

    const adminUser = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [adminId]
    );

    if (adminUser.rows.length === 0 || !adminUser.rows[0].is_developer) {
      return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
    }

    const userToDelete = await pool.query(
      'SELECT * FROM users WHERE id = $1 AND deleted = false',
      [userId]
    );

    if (userToDelete.rows.length === 0) {
      return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userData = userToDelete.rows[0];

    // –ó–ê–©–ò–¢–ê: BayRex –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å
    if (userData.username.toLowerCase() === 'bayrex') {
      return res.json({ success: false, message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã BayRex' });
    }

    if (userId === adminId) {
      return res.json({ success: false, message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' });
    }

    // –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
    await pool.query(
      `UPDATE users SET 
       deleted = true,
       display_name = '–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
       username = $1,
       email = $2,
       avatar = null,
       description = '–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω',
       status = 'offline',
       verified = false,
       is_developer = false
       WHERE id = $3`,
      ['deleted_' + Date.now(), 'deleted_' + Date.now() + '@deleted.com', userId]
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    io.emit('user_deleted', { 
      userId: userId,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω' 
    });

    // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
    const userEntry = Array.from(onlineUsers.entries())
      .find(([_, u]) => u.userId === userId);

    if (userEntry) {
      const [userSocketId] = userEntry;
      io.to(userSocketId).emit('user_deleted', { 
        message: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' 
      });
      onlineUsers.delete(userSocketId);
    }

    res.json({ 
      success: true, 
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω' 
    });
  } catch (error) {
    console.error('Error deleting user:', error);
    res.json({ success: false, message: '–û—à–∏–±–∫–∞' });
  }
});

// WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
io.on('connection', (socket) => {
  console.log('‚úÖ User connected:', socket.id);

  socket.on('user_join', async (userData) => {
    try {
      const user = await pool.query(
        'SELECT * FROM users WHERE id = $1 AND deleted = false',
        [userData.userId]
      );

      if (user.rows.length === 0) {
        console.log('‚ùå User not found:', userData.userId);
        socket.emit('user_not_found', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        return;
      }

      const userRow = user.rows[0];

      await pool.query(
        'UPDATE users SET status = $1 WHERE id = $2',
        ['online', userData.userId]
      );

      const onlineUser = {
        socketId: socket.id,
        username: userRow.username,
        displayName: userRow.display_name,
        userId: userData.userId,
        status: 'online',
        verified: userRow.verified,
        isDeveloper: userRow.is_developer,
        avatar: userRow.avatar
      };

      onlineUsers.set(socket.id, onlineUser);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      socket.broadcast.emit('user_online', onlineUser);

      console.log('üëã User joined:', userRow.displayName);
    } catch (error) {
      console.error('Error in user_join:', error);
    }
  });

  socket.on('load_chat_history', async (data) => {
    try {
      const messages = await pool.query(
        `SELECT * FROM messages WHERE 
         ((user_id = $1 AND to_user_id = $2) OR (user_id = $2 AND to_user_id = $1)) 
         AND deleted = false ORDER BY timestamp ASC`,
        [data.userId, data.targetId]
      );

      socket.emit('chat_history_loaded', { 
        targetId: data.targetId, 
        messages: messages.rows 
      });
    } catch (error) {
      console.error('Error loading chat history:', error);
      socket.emit('chat_history_loaded', { 
        targetId: data.targetId, 
        messages: [] 
      });
    }
  });

  socket.on('send_message', async (messageData) => {
    try {
      const onlineUser = onlineUsers.get(socket.id);
      if (!onlineUser) {
        console.log('‚ùå Online user not found for socket:', socket.id);
        socket.emit('user_not_found', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∏ –Ω–µ —É–¥–∞–ª–µ–Ω –ª–∏ –æ–Ω
      const recipient = await pool.query(
        'SELECT * FROM users WHERE id = $1 AND deleted = false',
        [messageData.toUserId]
      );

      if (recipient.rows.length === 0) {
        socket.emit('user_not_found', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω' });
        return;
      }

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (!messageData.text && !messageData.fileData && !messageData.giftId) {
        socket.emit('message_sent', { success: false, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
        return;
      }

      const messageId = Date.now().toString();

      await pool.query(
        `INSERT INTO messages (id, user_id, username, display_name, text, to_user_id, 
         verified, is_developer, type, file_data, file_name, file_type, file_size, 
         gift_id, gift_name, gift_price) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)`,
        [messageId, onlineUser.userId, onlineUser.username, onlineUser.displayName, 
         messageData.text || '', messageData.toUserId, onlineUser.verified, onlineUser.isDeveloper,
         messageData.type || 'text', messageData.fileData || null, messageData.fileName || null,
         messageData.fileType || null, messageData.fileSize || 0, messageData.giftId || null,
         messageData.giftName || null, messageData.giftPrice || null]
      );

      const message = {
        id: messageId,
        userId: onlineUser.userId,
        username: onlineUser.username,
        displayName: onlineUser.displayName,
        text: messageData.text || '',
        toUserId: messageData.toUserId,
        timestamp: new Date().toISOString(),
        verified: onlineUser.verified,
        isDeveloper: onlineUser.isDeveloper,
        type: messageData.type || 'text',
        fileData: messageData.fileData || null,
        fileName: messageData.fileName || null,
        fileType: messageData.fileType || null,
        fileSize: messageData.fileSize || 0,
        giftId: messageData.giftId || null,
        giftName: messageData.giftName || null,
        giftPrice: messageData.giftPrice || null,
        deleted: false,
        avatar: onlineUser.avatar
      };

      console.log('üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç', message.displayName, '–∫', messageData.toUserId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
      socket.emit('new_message', message);
      socket.emit('message_sent', { success: true });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
      const recipientEntry = Array.from(onlineUsers.entries())
        .find(([_, u]) => u.userId === messageData.toUserId);

      if (recipientEntry) {
        const [recipientSocketId, recipientUser] = recipientEntry;
        io.to(recipientSocketId).emit('new_message', message);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        io.to(recipientSocketId).emit('new_message_notification', {
          from: onlineUser.displayName,
          message: messageData.text,
          userId: onlineUser.userId,
          avatar: onlineUser.avatar
        });
        console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', recipientUser.displayName);
      }

      console.log('‚úÖ Message sent successfully to database and recipients');
    } catch (error) {
      console.error('Error sending message:', error);
      socket.emit('message_sent', { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  });

  socket.on('delete_message', async (data) => {
    try {
      const { messageId, userId } = data;

      const message = await pool.query(
        'SELECT * FROM messages WHERE id = $1',
        [messageId]
      );

      if (message.rows.length === 0) {
        socket.emit('message_delete_error', { message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        return;
      }

      const messageData = message.rows[0];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å)
      if (messageData.user_id !== userId && messageData.to_user_id !== userId) {
        socket.emit('message_delete_error', { message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' });
        return;
      }

      // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
      await pool.query(
        'UPDATE messages SET deleted = true WHERE id = $1',
        [messageId]
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
      const participants = [messageData.user_id, messageData.to_user_id];

      participants.forEach(participantId => {
        const participantEntry = Array.from(onlineUsers.entries())
          .find(([_, u]) => u.userId === participantId);

        if (participantEntry) {
          const [participantSocketId] = participantEntry;
          io.to(participantSocketId).emit('message_deleted', { 
            messageId: messageId,
            deletedBy: userId
          });
        }
      });

      socket.emit('message_deleted', { 
        messageId: messageId,
        success: true 
      });

      console.log('üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:', messageId);
    } catch (error) {
      console.error('Error deleting message:', error);
      socket.emit('message_delete_error', { message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  });

  socket.on('disconnect', async () => {
    const onlineUser = onlineUsers.get(socket.id);
    if (onlineUser) {
      try {
        await pool.query(
          'UPDATE users SET status = $1 WHERE id = $2',
          ['offline', onlineUser.userId]
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        socket.broadcast.emit('user_offline', onlineUser);

        onlineUsers.delete(socket.id);

        console.log('üëã User disconnected:', onlineUser.displayName);
      } catch (error) {
        console.error('Error updating user status on disconnect:', error);
      }
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

server.listen(PORT, '0.0.0.0', () => {
  console.log('=====================================');
  console.log('üöÄ EPIC MESSENGER SERVER STARTED!');
  console.log('üì° Port:', PORT);
  console.log('üåê Environment:', process.env.NODE_ENV || 'development');
  console.log('üíæ Storage: PostgreSQL');
  console.log('üîê Authentication: ENABLED');
  console.log('‚úÖ Verified system: ACTIVE');
  console.log('üë®‚Äçüíª Developer badges: ENABLED');
  console.log('üñºÔ∏è Avatar upload: ENABLED');
  console.log('üìÅ File sharing: ENABLED');
  console.log('üîç User search: ENABLED');
  console.log('üìù Posts system: ENABLED');
  console.log('üéÅ Gift shop: ENABLED');
  console.log('üí∞ Promocodes system: ENABLED');
  console.log('üóëÔ∏è Message deletion: ENABLED');
  console.log('üé§ Voice messages: ENABLED');
  console.log('üîî Push notifications: ENABLED');
  console.log('üõ°Ô∏è BayRex account: PROTECTED FROM DELETION');
  console.log('üë§ Profile system: ENABLED');
  console.log('üî¢ BayRex usernames: ENABLED (30 max)');
  console.log('üì± Mobile version: FIXED KEYBOARD ISSUES');
  console.log('üé® Custom themes: FIXED');
  console.log('=====================================');
});
